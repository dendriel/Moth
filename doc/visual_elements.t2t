
== Working on Visual Elements ==

The ``visual element`` type is the processor subject of work. Nevertheless, the user does not have
directly access to it, only receiving a //key// to access and interact over the element. Internally
the processor will take care of it.

Another element that is shaped by the processor is the ``viewpoints`` data type. This types contain
some data that is used by the ``visual element``, but it is also intended to be something abstract
to the user. More about this element will be talk latter.

This section presents some basic functions that permits interation with ``visual element``. Advanced
and more specific functions will be shown latter.

=== Create ===

As seen in previous sections, the ``visual element`` has few fields that the user have to know
about, and other few that is only used internally. The first must be specified at the elements
creation and the most part can be changed after it.

 The basic parameters that is needed to create a visual element is the following:

- Horizontal (x) and vertical (y) positioning of the element in the screen;

- The type of the element;

- The ``viewpoints`` data type, previously filled by another function that works with that (seen
latter in this section);

- The visibility (display) of the element. With this parameter the user can hide or show the element
at any moment of the game without removing it.


With these elements, we can ilustrate a creation function prototype:

```
visual_key create_visual_element(x, y, type, viewpoints, visible);
```

The creation function will return a visual element key to latter access to the element. Both,
current position and current view attributes will receive the default value 0.


=== Update ===

Updating a ``visual element`` probably will be the most frequently action requested to the
video processor. Thus, there is a set of specific updating functions intended to be less complex
when changing an element attribute. The update functions are:

: ``update_visual_element_pos(key, x, y)``

Used to change the position of the element in the screen.

: ``update_visual_element_type(key, type)``

Change the type of the element. If the element was created as static, changing him to dynamic
will take no effect unless you change the //update interval// attribute from the ``viewpoint`` data
type.

: ``update_visual_element_view(key, position, view)``

Change the view point of the element in the screen.

: ``update_visual_element_interval(key, time)``

Alter or add a update interval that will be used to switch between view points in dynamic elements.

: ``update_visual_element_viewpoints(key, viewpoints)``

Permits that the ``visual element`` receive a new ``viewpoint`` data type.

: ``update_visual_list_pos(x, y, visual_key[])``

This function allows the user to update all the visual elements that were in the internal visual
list, except for that declared by parameter in the **visual_key** array. You can find more
information about the use of this function in the section "Screen Positioning Concepts".


=== Remove ===

When removing a visual element all his data will be lost. To remove an element is needed his
``visual key`` received at element creation. The prototype of the "remove element" function is shown
bellow:

```
void remove_visual_element(key);
```


=== Visibility ===

If there is need to temporarily stop displaying some element, the "hide element" function
can be used. The function offers access to the element "display" attribute. Set this parameter
to //false// when there is need to hide the element, and set to //true// to return displaying the
element.

```
void display_visual_element(bool)
```

=== Layers Facility ===

When building 2D games, for some cases is needed to draw the images on the screen in an arbitrary
order. The Moth Processor keep two priority lists of elements that, when filled, will be drawn into
the screen independently of the order of creation of the elements.

There is two element's list keep by the processor, the //under layer//and the //over layer//. The 
//under layer// can be used to drawn floors, landscapes, bases of objects, etc. The //over layer//
can be used to draw roofs, weater, flying elements, area effects as fog, and many others. Each
layer list has 5 positions to be filled with the referece of visual elements that must be already
inserted in the processor.

The layer's list can be accessed through the following functions prototypes.

: ``set_under_layer_element(layer_priority, key)``
: ``set_over_layer_element(layer_priority, key)``

Will add the visual element pointed by ``key`` into the layer list. More about the layer priority
data type can be found in "Type Definitions" from "Basic Data" section. **OBS.:** If the requested
priority is already occuped, it will be free and the new ``key`` added.

: ``unset_under_layer_element(layer_priority)``
: ``unset_over_layer_element(layer_priority)``

	Clear the ``key`` in the position pointed by ``layer_priority``.


The under and over layers list are used by the processor to draw the first elements (under layer)
of an "screen update cicle", starting with the element of higher priority to the element with lesser
priority. The last elements will be drawn with the same characteristics. The element with higher
priority will be drawn into screen first, and the element with less priority will be the last
element drawn into the screen.

**OBS.:** If an element that is in one of the layer's list is removed, his reference will be
automatically removed too.


