
== Basic data ==

This section presents and describes the data types and constants definitions used by the video
processor.


=== Structures ===

==== Visual Elements ====

The Visual Element is the base data type that is used by the processor. It represents an element
that will be displayed in the screen, according with the data of his attributes. This data is
basically represented as follow:

- [**st**] Position - Position of the visual element in the screen;

- [**st**] View - Images of the element and how it should be displayed;

- [**tp**] Key - Key of the element in the list of visual elements.


==== Position ====

The Position data type is used to hold the visual element horizontal and vertical coordinates in the
screen. His attributes are listed bellow:

- [**tp**] X - The horizontal position of the element in the screen;

- [**tp**] Y - The vertical position of the element in the screen.


==== View ====

The View data type contains: the images that the element owns, informations how this data will
be used and internal variables that are used in running time for control issues. The content of
a View data type is the following:

- [**tp**] Viewpoints -  Hold the element image viewpoints (see Type Definitions sub-section for
more info);

- [**tp**] Positions - Number of positions in the ``viewpoints`` attribute (not related with the
``position`` structure);

- [**tp**] Views - Number of views per position;

- [**tp**] Current Position - The selected position to be displayed;

- [**tp**] Current View - The selected view to be displayed;

- [**tp**] Index - Used to access the ``viewpoints`` type "Viewpoints[Index]";

- [**tp**] Interval time - For dynamic types, define the update ``viewpoints`` interval;

- [**tp**] Interval control - Used to "make" the interval time. Each update screen loops has X 
milliseconds of interval. Each interval increments the control variable. When control*update_screen
equals to interval time we have an update ``viewpoints`` event.

- [**en**] Type - The type of the element. Determines how the data from the ``view`` will be used;


=== Types Definitions ===

==== Viewpoints ====

This data type, from the ``view`` data type, is made from an array of ``BITMAP`` elements and is
defined as follow.

```
BITMAP viewpoints[MAX_VIEWPOINTS]
```

The ``viewpoints`` type is an abstraction. The user will only need to pass a reference from a
variable of this type and the processor functions will do the rest. These functions will split a raw
``BITMAP`` and fill the ``viewpoints``.


==== Key ====

The Key (or Visual Key) is another abstraction type that address the ``visual element`` to the
system. Must be held by the user to have access and interact over an element. The definition of this
type is made as follow.

```
unsigned int visual_key
```

=== Enumerations ===

==== Type ====

Type is an enumeration that is used to informs the visual element types. The types that an
``visual element`` can assume is listed bellow.

- Static - The element is static and will not have his ``viewpoint`` updated unless the processor
receives a requisition to do that;

- Dynamic - The element is dynamic and the processor will update the element ``viewpoint`` according
with interval time from ``view`` data;

- Animated - A kind of dynamic type. Will be described in "Working on View data types";

- Smooth - A kind of dynamic type. Will be described in "Working on View data types";

- Overlay - A kind of dynamic type. Will be described in "Working on View data types".


==== Layer Priority ====

The Layer Priority enumeration is used to define in what order the landscape visual elements will
be drawn (see "Layers Facility" section). The highest priority layer will be drawn first, the lowest
will be draw by the last. The order applies to both under and over layer elements list. There is
five priorities listed below:

- //priority_1// - The highest priority. The element in this position will be draw first;

- //priority_2// - The element in this position will be draw second;

- //priority_3// - The element in this position will be draw third;

- //priority_4// - The element in this position will be draw fourth;

- //priority_5// - The lowest priority. From the layer list, the element in this position will be
draw by the last;


=== Constants ===

Some constants that can be used when interacting with the video processor.

- **MAX_VIEWPOINTS** - The constant MAX_VIEWPOINTS defines the maximum elements of the
``viewpoints`` type. Should initillay be about the size of 25. The count is: 4 directions (up,
right, down and left) plus 4 view points (stand, left move, stand, right move), in addition to 9
extra positions to append whatever viewpoint the user want to do (emotions, dead body,
transformations, etc).

