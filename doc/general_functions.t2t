
== General Functions ==

This section intends to introduce the use of all the functionalities of the video processor, showing
some actions like initialization, functions to operate and control, and finishing the processor.

The video processor is "attached" on the use of the [Allegro library https://www.allegro.cc], thus
is needed to initialize this library before starting the processor. With that, we can call the
processor initialization function that will return a identifier (a ``pthread_id``) to monitor and
halt the processor. The initialization function prototype would be:

```
moth_initialize(screen_height, screen_width, frame_rate)
```

Both the screen size and frame rate (or Frames Per Second - FPS) must be defined at the
initialization. We will divide 1 by the frame rate and will have the update interval time used by
the Updater Thread (as illustrated in latter sections). Thus, any ``visual element`` updates must be
spaced of ``1/FPS`` seconds, or else, some updates may take no effect. For example, if the FPS is
50, and an element is updated 2 times before "1/FPS = 20 ms", only the last update will be perceived
by the updater thread, as it will update the screen only every 20 ms.


To halt the vide processor, is possible to use the "finalize" function, that will free the processor
allocated resources and join the active threads. The function prototype is shown below.

```
moth_finalize(void)
```

**WARNING**: Do not finish Allegro library before the processor itself, because it will be using
resources from the liballegro.

Another functions of general use are listed below.

: ``screen_freeze(void)``

Will stop the screen updating until started again.

: ``screen_start(void)``

Will start the screen updating. Will be needed only if the ``screen_freeze`` function is used,
because the Moth Processor is initialized in the active (updating) status.

: ``processor_status copy_processor_status(void)``

 Return all the data contained in the processor at the request moment. There is possibility that
if something is updated in the processor, the same thing will change in the returned data too
(some allocated data that is accessed by referece, for example).

: ``save_processor_status(processor_status, file_name)``

 Can save all the content from a ``processor_status`` data type in the file specified by file_name.
The data can be loaded with the next function.

: ``load_processor_status(file_name)``

 Will load into the processor the ``processor_status`` data from the file specified by file_name.
This operation will free all the current content contained by the processor.


**OBS.:** ``processor_status`` data type is not defined. The related functions aren't needed and are
just implementation sugestions.

